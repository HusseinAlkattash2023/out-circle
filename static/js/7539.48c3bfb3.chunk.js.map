{"version":3,"file":"static/js/7539.48c3bfb3.chunk.js","mappings":"qSAaMA,EAASC,EAAAA,GACL,CACNC,MAAOD,EAAAA,KAAaC,QAAQC,SAAS,6BACpCA,WAwDL,UAtDmB,WAAO,IAAD,EACvB,GAA2BC,EAAAA,EAAAA,UAAS,IAApC,eAAOF,EAAP,KAAeG,EAAf,KACA,GAAuDC,EAAAA,EAAAA,IAAQ,CAACC,UAAUC,EAAAA,EAAAA,GAAYR,KAA9ES,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAA0BC,EAA5C,EAAiCC,UAAWD,OAEtCE,GAAeC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMF,YAAjB,IAE3BG,GAAWC,EAAAA,EAAAA,MAsBjB,OACE,iBAAKC,UAAU,aAAf,WACE,0BAAK,SAAC,KAAD,OACP,iBAAKA,UAAU,OAAf,WACI,+BACI,6CACA,gBAAKC,IAAKC,EAAAA,EAAUC,IAAI,SAE5B,kBAAMC,SAAUZ,GA7BL,WACfa,IAAAA,KAAA,UAAcV,EAAd,4CAA8DX,IAC7DsB,MAAK,SAAAC,GACJ,IAAMC,EAAWD,EAAIE,KACE,kBAAbD,EACRE,EAAAA,GAAAA,MAAY,yCAEZA,EAAAA,GAAAA,QAAc,uBACdC,YAAW,WACTb,EAAS,kBACV,GAAE,KACHc,aAAaC,QAAQ,UAAUL,EAASM,SACxCF,aAAaC,QAAQ,eAAeL,EAASO,cAC7CH,aAAaC,QAAQ,OAAOL,EAASQ,KAAK,IAE7C,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,GACF,IAU6ClB,UAAU,mBAAlD,WACI,iBAAKA,UAAU,OAAf,WACA,wDACA,kCAAOqB,KAAK,SAAa9B,EAAS,UAAlC,IAA4C+B,MAAOtC,EAAOuC,SAAU,SAACC,GAAMrC,EAASqC,EAAEC,OAAOH,MAAO,MACpG,iBAAMI,MAAO,CAACC,MAAM,OAApB,mBAA6BlC,EAAOT,aAApC,aAA6B,EAAc4C,cAE3C,mBAAQP,KAAK,SAAb,2BAKR,gBAAKrB,UAAU,QAAf,UACE,gBAAKC,IAAK4B,EAAO1B,IAAI,SAI1B,C","sources":["Pages/ForgetPass/index.js"],"sourcesContent":["import React , {useState} from 'react'\r\nimport { useNavigate} from 'react-router-dom'\r\nimport password from '../../Assets/images/password.svg'\r\nimport './index'\r\nimport Axios from \"axios\";\r\nimport image from '../../Assets/images/Mask Group 2.png'\r\nimport './index.css'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst schema = yup\r\n  .object({\r\n    email: yup.string().email().required(\"Please Enter your Email\"),\r\n  }).required();\r\n\r\nconst ForgetPass = () => {\r\n  const [email , setEmail] = useState(\"\");\r\n  const { register, handleSubmit , formState:{errors}} = useForm({resolver: yupResolver(schema)});\r\n  \r\n  const BASE_API_URL = useSelector((state) => state.BASE_API_URL);\r\n\r\n  const navigate = useNavigate()\r\n  const onSubmit = () => {\r\n    Axios.post(`${BASE_API_URL}/api/users/forget-password?email=${email}`)\r\n    .then(res => {\r\n      const response = res.data\r\n      if(typeof response === \"string\"){\r\n        toast.error(\"Sorry, the account does not exist...\")\r\n      }else{\r\n        toast.success(\"Check your email...\");\r\n        setTimeout(() => {\r\n          navigate('/reset-password');\r\n        }, 4000);\r\n        localStorage.setItem(\"user_id\",response.user_id);\r\n        localStorage.setItem(\"account_type\",response.account_type);\r\n        localStorage.setItem(\"code\",response.code[0]);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"forgetpass\">\r\n      <div><Toaster/></div>\r\n    <div className='body'>\r\n        <header>\r\n            <h2>forget password</h2>\r\n            <img src={password} alt=\"\"/>\r\n        </header>\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"needs-validation\">\r\n            <div className='pass'>\r\n            <label>Please Write your email</label>\r\n            <input type=\"email\"  {...register(\"email\")} value={email} onChange={(e)=> {setEmail(e.target.value)}}/>\r\n            <span style={{color:\"red\"}}>{errors.email?.message}</span>\r\n            </div>\r\n            <button type='submit'>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    </div>\r\n    <div className=\"image\">\r\n      <img src={image} alt=\"\"/>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForgetPass;\r\n"],"names":["schema","yup","email","required","useState","setEmail","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","BASE_API_URL","useSelector","state","navigate","useNavigate","className","src","password","alt","onSubmit","Axios","then","res","response","data","toast","setTimeout","localStorage","setItem","user_id","account_type","code","catch","err","console","log","type","value","onChange","e","target","style","color","message","image"],"sourceRoot":""}